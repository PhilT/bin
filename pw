#!/bin/bash

# https://gist.github.com/2371406
# version 0.1 - Not much error handling yet.
# version 0.2 - Added --edit command
# version 0.3 - generate password and copy to clipboard
#               Don't re-encrypt file if not changed
#               Copy retrieved password to clipboard
#               Improve display of multiple passwords
#
# Add to ~/bin/pw and chmod +x it.
# See bottom of file for usage.

if [[ -f ~/bin/config ]]; then
  source ~/bin/config
fi

if [[ -z $PASSWORD_FILE ]]; then
  echo 'PASSWORD_FILE must be set in ~/bin/config'
  exit 1
fi

function cancel_input {
  stty $stty_orig
  echo 'Cancelled.'
  exit
}

function enter_password {
  trap cancel_input SIGINT
  stty_orig=`stty -g`
  stty -echo
  read secret
  stty $stty_orig
  trap SIGINT
}

if [[ $# > 0 ]]; then
  echo 'Enter encryption password:'
  enter_password
  OPTIONS=--force-mdc\ --no-tty\ -q\ --no-use-agent\ --yes\ --passphrase=$secret
fi


function encrypt {
  gpg $OPTIONS -c -o $PASSWORD_FILE.gpg $PASSWORD_FILE
  cleanup
  echo 'Password file updated.'
}

function decrypt {
  gpg $OPTIONS -o $PASSWORD_FILE $PASSWORD_FILE.gpg
}

function backup_decrypted_file {
  cp $PASSWORD_FILE $PASSWORD_FILE.bak
}

function cleanup {
  rm -f $PASSWORD_FILE $PASSWORD_FILE.bak
}

function init_password_csv {
  encrypt
}

function edit_password_csv {
  decrypt
  backup_decrypted_file
  nano $PASSWORD_FILE
  if diff $PASSWORD_FILE $PASSWORD_FILE.bak > /dev/null; then
    cleanup
    echo 'No changes made.'
  else
    encrypt
  fi
}

function add_password {
  tr -dc A-Za-z0-9_ < /dev/urandom | head -c8 | xsel -i
  pass=`xsel`
  echo Password copied to clipboard.

  decrypt
  echo $1,$2,$pass >> $PASSWORD_FILE
  encrypt
}

function match_command {
  cat $PASSWORD_FILE | sed -n "s/.*$1.*,\(.*\)/\1/p"
}

function matched_site {
  cat $PASSWORD_FILE | sed -n "s/\(.*$1.*\),.*,.*/\1/p"
}

function matched_login {
  cat $PASSWORD_FILE | sed -n "s/.*$1.*,\(.*\),.*/\1/p"
}

function find_password {
  decrypt
  matches=`match_command $1 | wc -l`
  if [ $matches -eq 0 ]; then
    echo No matches.
  elif [ $matches -eq 1 ]; then
    match_command $1 | tr -d '\n' | xsel -i
    echo Password for $(matched_site $1) copied to clipboard. Login: $(matched_login $1)
  else
    echo Multiple passwords matched. Displaying:
    cat $PASSWORD_FILE | grep $1
  fi
  rm -f $PASSWORD_FILE
}

if [ $# == 2 ]; then
  add_password $1 $2
elif [ $# == 1 ]; then
  if [ $1 == '--init' ]; then
    init_password_csv
  elif [ $1 == '--edit' ]; then
    edit_password_csv
  else
    find_password $1
  fi
else
  echo 'Usage (1): pw --init          Encrypts a prepared .passwords.csv file'
  echo 'Usage (2): pw --edit          Edit the .passwords.csv file'
  echo 'Usage (3): pw TERM            find a password'
  echo 'Usage (4): pw URL/NAME LOGIN  add a password (generated and copied to clipboard)'
  echo 'Add or view a password from a GPG encrypted password file.'
  echo
  echo 'TERM          Enter a partial site name or URL'
  echo 'URL/NAME      A name or URL of a site'
  echo 'LOGIN         Email address or username used to login'
  echo
  exit
fi

